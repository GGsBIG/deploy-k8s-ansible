---
- name: "Stage 2: Container Runtime Setup"
  hosts: k8s_nodes
  become: yes
  gather_facts: yes

  tasks:
    - name: Kill unattended-upgrades and wait for dpkg lock
      shell: |
        sudo pkill -f unattended-upgrade || true
        sudo pkill -f apt.systemd.daily || true
        timeout=300
        while [ $timeout -gt 0 ] && (sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1); do
          echo "Waiting for dpkg lock to be released... ($timeout seconds remaining)"
          sleep 5
          timeout=$((timeout-5))
        done
        sudo rm -f /var/lib/dpkg/lock-frontend
        sudo rm -f /var/lib/dpkg/lock
        sudo dpkg --configure -a || true
      ignore_errors: yes

    - name: Install required packages
      apt:
        name:
          - jq
          - curl
        state: present
        update_cache: yes

    - name: Download containerd binary
      get_url:
        url: "https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
        dest: "/tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
        mode: '0644'

    - name: Create containerd service file
      copy:
        content: |
          # Copyright The containerd Authors.
          #
          # Licensed under the Apache License, Version 2.0 (the "License");
          # you may not use this file except in compliance with the License.
          # You may obtain a copy of the License at
          #
          #     http://www.apache.org/licenses/LICENSE-2.0
          #
          # Unless required by applicable law or agreed to in writing, software
          # distributed under the License is distributed on an "AS IS" BASIS,
          # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          # See the License for the specific language governing permissions and
          # limitations under the License.

          [Unit]
          Description=containerd container runtime
          Documentation=https://containerd.io
          After=network.target dbus.service

          [Service]
          ExecStartPre=-/sbin/modprobe overlay
          ExecStart=/usr/local/bin/containerd

          Type=notify
          Delegate=yes
          KillMode=process
          Restart=always
          RestartSec=5

          # Having non-zero Limit*s causes performance problems due to accounting overhead
          # in the kernel. We recommend using cgroups to do container-local accounting.
          LimitNPROC=infinity
          LimitCORE=infinity

          # Comment TasksMax if your systemd version does not supports it.
          # Only systemd 226 and above support this version.
          TasksMax=infinity
          OOMScoreAdjust=-999

          [Install]
          WantedBy=multi-user.target
        dest: "/tmp/containerd.service"
        mode: '0644'

    - name: Extract containerd binary
      unarchive:
        src: "/tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
        dest: /usr/local
        remote_src: yes
        creates: /usr/local/bin/containerd

    - name: Create systemd directory for containerd
      file:
        path: /usr/local/lib/systemd/system
        state: directory
        mode: '0755'

    - name: Install containerd service file
      copy:
        src: /tmp/containerd.service
        dest: /usr/local/lib/systemd/system/containerd.service
        remote_src: yes
        mode: '0644'

    - name: Enable and start containerd
      systemd:
        name: containerd
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Download runc binary
      get_url:
        url: "https://github.com/opencontainers/runc/releases/download/v1.3.0/runc.amd64"
        dest: "/tmp/runc.amd64"
        mode: '0755'

    - name: Install runc binary
      copy:
        src: /tmp/runc.amd64
        dest: /usr/local/sbin/runc
        remote_src: yes
        mode: '0755'
        owner: root
        group: root

    - name: Create CNI bin directory
      file:
        path: /opt/cni/bin
        state: directory
        mode: '0755'

    - name: Download CNI plugins
      get_url:
        url: "https://github.com/containernetworking/plugins/releases/download/v1.7.1/cni-plugins-linux-amd64-v1.7.1.tgz"
        dest: "/tmp/cni-plugins.tgz"
        mode: '0644'

    - name: Extract CNI plugins
      unarchive:
        src: /tmp/cni-plugins.tgz
        dest: /opt/cni/bin
        remote_src: yes
        creates: /opt/cni/bin/bridge

    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Generate default containerd configuration
      shell: containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    - name: Configure containerd to use systemd cgroup driver
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: Update sandbox image to pause:3.10
      replace:
        path: /etc/containerd/config.toml
        regexp: 'sandbox_image = "registry.k8s.io/pause:3.8"'
        replace: 'sandbox_image = "registry.k8s.io/pause:3.10"'

    - name: Restart containerd
      systemd:
        name: containerd
        state: restarted

    - name: Clean up downloaded files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
        - "/tmp/containerd.service"
        - "/tmp/runc.amd64"
        - "/tmp/cni-plugins.tgz"